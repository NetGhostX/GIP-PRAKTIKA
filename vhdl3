library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity akkumulator is 

    port (
        d    : in std_logic_vector(3 downto 0); -- Daten-Eingang
      ld : in std_logic; -- MUX Steuereingang: 0(gedrückt)=Ergebnis durchschalten, 1(nicht gedrückt)= Dateneingang durchschalten
        sub : in std_logic; -- 0=+, 1=-
        e    : in std_logic; -- enable Auffangregister 0(gedrückt)= enabled
        clk : in std_logic; -- Takt

        c : out std_logic; -- LEDG(4) carry out
        q : out std_logic_vector(3 downto 0); -- LEDG(3..0) Daten-Ausgang

        -- debug pins:
        z_out : out std_logic_vector(4 downto 0)    -- LEDR(4..0), z4 = carry


        );
end entity akkumulator;

architecture arch of akkumulator is
 signal q_int : signed(4 downto 0);
 signal carry : std_logic;
 begin
  p: process (clk, e, ld, sub)
  begin
    if(clk'event and clk = '1') then
        if(e='1') then
            if(ld = '1') then
                q_int <= '0' & signed(d);
            elsif(sub = '0') then
                q_int <= ('0' & q_int(3 downto 0)) + ('0' & signed(d));
            elsif(sub = '1') then
                q_int <= ('0' & q_int(3 downto 0)) + ('0' & signed(not(d))+1);
            end if;
        elsif(e = '0') then
            q_int <= q_int;
        end if;
    end if;
end process p;
    q <= std_logic_vector(q_int(3 downto 0));
    c <= q_int(4);
    z_out <= std_logic_vector(q_int);
end arch;
