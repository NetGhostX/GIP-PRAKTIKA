library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity counter is 



	port (
		reset_n     : in std_logic; -- Key 3
      clk         : in std_logic; --50 MHz
		switches		: in std_logic_vector(7 downto 0); -- zur Übernahme des ofl-values
		cnt_enable	: in std_logic; -- SW9
		ofl_rd		: in std_logic; -- read and store ofl-value, KEY0
		cnt_rd		: in std_logic; -- read and store the actual count-value, KEY1
		cnt_val_act : out std_logic_vector(7 downto 0); -- aktueller Zählwert
		cnt_val_stored_out : out std_logic_vector(7 downto 0) -- gespeicherter Zählwert
		
		
		);
end entity counter;

architecture arch of counter is

signal counter: unsigned(0 to 22);
signal counter2: unsigned(7 downto 0);
signal ofl_val: unsigned(7 downto 0);


begin

p: process(clk, reset_n, cnt_enable, ofl_rd, cnt_rd)
	begin
		if reset_n = '1' then
			counter2 <= (others=>'0');
		elsif clk = '1' and clk'event then
			if cnt_enable = '1' then
				counter <= counter +1;	
			end if;
				if ofl_rd = '1' then
					ofl_val <= unsigned(switches);
				end if;								
				if counter2 < ofl_val then				
					if counter = 4999999 then
						counter2 <= counter2 + 1;
						counter <= (others=>'0');
					end if;
					cnt_val_act <= not std_logic_vector(counter2);
				else
					counter2 <= (others=> '0');
				end if;				
				if cnt_rd = '1' then
					cnt_val_stored_out <= not std_logic_vector(counter2);
				end if;
		end if;
	end process;

end architecture arch;
